import * as React from 'react';
import { LinkComponent, Logger, ReferralContextIdentifiers } from '../GlobalQuickSearchWrapper';
import { ResultsWithTiming, ResultsGroup, ConfluenceResultsMap, JiraResultsMap } from '../../model/Result';
import { WithAnalyticsEventsProps } from '@atlaskit/analytics-next';
import { JiraFeatures, ConfluenceFeatures, CommonFeatures } from '../../util/features';
import { Scope, QuickSearchContext } from '../../api/types';
import { Filter, FilterWithMetadata } from '../../api/CrossProductSearchClient';
import { SearchSessionProps } from '../SearchSessionProvider';
export interface SearchResultProps<T> extends State<T> {
    retrySearch: () => void;
    searchMore: (scope: Scope) => void;
    searchSessionId: string;
    onFilterChanged(filter: FilterWithMetadata[]): void;
}
export interface PartiallyLoadedRecentItems<T extends ConfluenceResultsMap | JiraResultsMap> {
    eagerRecentItemsPromise: Promise<ResultsWithTiming<T>>;
    lazyLoadedRecentItemsPromise: Promise<Partial<T>>;
}
export interface Props<T extends ConfluenceResultsMap | JiraResultsMap> extends WithAnalyticsEventsProps {
    logger: Logger;
    linkComponent?: LinkComponent;
    product: QuickSearchContext;
    getSearchResultsComponent(state: SearchResultProps<T>): React.ReactNode;
    getRecentItems(sessionId: string): PartiallyLoadedRecentItems<T>;
    getSearchResults(query: string, sessionId: string, startTime: number, queryVersion: number, filters: Filter[]): Promise<ResultsWithTiming<T>>;
    getAutocompleteSuggestions?(query: string): Promise<string[]>;
    getNavAutocompleteSuggestions?(query: string): Promise<string[]>;
    referralContextIdentifiers?: ReferralContextIdentifiers;
    /**
     * return displayed groups for pre query searches
     * Used by analytics to tell how many ui groups are displayed for user
     * for example in jira we pass (issues, boards, filters and projects but we display only 2 groups issues and others combined)
     * @param results
     */
    getPreQueryDisplayedResults(results: T | null, searchSessionId: string): ResultsGroup[];
    /**
     * return displayed groups for post query searches
     * Used by analytics to tell how many ui groups are displayed for user
     * for example in jira we pass (issues, boards, filters and projects but we display only 2 groups issues and others combined)
     * @param results
     */
    getPostQueryDisplayedResults(searchResults: T | null, latestSearchQuery: string, recentItems: T | null, isLoading: boolean, searchSessionId: string): ResultsGroup[];
    handleSearchSubmit?(event: React.KeyboardEvent<HTMLInputElement>, searchSessionId: string): void;
    placeholder?: string;
    selectedResultId?: string;
    onSelectedResultIdChanged?: (id: string | null | number) => void;
    enablePreQueryFromAggregator?: boolean;
    inputControls?: JSX.Element;
    features: JiraFeatures | ConfluenceFeatures | CommonFeatures;
    advancedSearchId: string;
}
declare type CompleteProps<T extends ConfluenceResultsMap | JiraResultsMap> = Props<T> & SearchSessionProps & WithAnalyticsEventsProps;
export interface State<T> {
    latestSearchQuery: string;
    isLoading: boolean;
    isError: boolean;
    keepPreQueryState: boolean;
    searchResults: T | null;
    recentItems: T | null;
    autocompleteSuggestions?: string[];
    currentFilters: FilterWithMetadata[];
}
/**
 * Container/Stateful Component that handles the data fetching and state handling when the user interacts with Search.
 */
export declare class QuickSearchContainer<T extends ConfluenceResultsMap | JiraResultsMap> extends React.Component<CompleteProps<T>, State<T>> {
    unmounted: boolean;
    latestQueryVersion: number;
    constructor(props: CompleteProps<T>);
    shouldComponentUpdate(nextProps: CompleteProps<T>, nextState: State<T>): boolean;
    componentDidCatch(error: any, info: any): void;
    componentWillUnmount(): void;
    doSearch: (query: string, queryVersion: number, filters: FilterWithMetadata<Filter, import("../../api/CrossProductSearchClient").QueryBasedSpaceFilterMetadata>[]) => Promise<void>;
    fireExperimentExposureEvent: () => void;
    fireShownPreQueryEvent: (requestStartTime?: number | undefined, renderStartTime?: number | undefined) => void;
    fireShownPostQueryEvent: (startTime: number, elapsedMs: number, searchResults: T, recentItems: T, timings: Record<string, string | number>, searchSessionId: string, latestSearchQuery: string, latestFilters: Filter[], isLoading: boolean) => void;
    handleSearch: (newLatestSearchQuery: string, queryVersion: number, filters: FilterWithMetadata<Filter, import("../../api/CrossProductSearchClient").QueryBasedSpaceFilterMetadata>[]) => void;
    retrySearch: () => void;
    componentDidMount(): Promise<void>;
    handleAutocomplete: (query: string) => Promise<void>;
    getMoreSearchResults: (scope: Scope) => Promise<void>;
    handleSearchSubmit: (event: React.KeyboardEvent<HTMLInputElement>) => void;
    handleFilter: (filter: FilterWithMetadata<Filter, import("../../api/CrossProductSearchClient").QueryBasedSpaceFilterMetadata>[]) => void;
    render(): JSX.Element;
}
export declare const BaseConfluenceQuickSearchContainer: {
    new (props: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>): {
        searchSessionId: string | null;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">, context?: any): {
        searchSessionId: string | null;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<Pick<CompleteProps<ConfluenceResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
export declare const BaseJiraQuickSearchContainerJira: {
    new (props: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>): {
        searchSessionId: string | null;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">, context?: any): {
        searchSessionId: string | null;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<Pick<CompleteProps<JiraResultsMap>, "placeholder" | "searchSessionId" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features"> & React.RefAttributes<any>, "key" | "placeholder" | "linkComponent" | "selectedResultId" | "onSelectedResultIdChanged" | "inputControls" | "referralContextIdentifiers" | "advancedSearchId" | "ref" | "enablePreQueryFromAggregator" | "logger" | "product" | "getSearchResultsComponent" | "getRecentItems" | "getSearchResults" | "getAutocompleteSuggestions" | "getNavAutocompleteSuggestions" | "getPreQueryDisplayedResults" | "getPostQueryDisplayedResults" | "handleSearchSubmit" | "features">>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
export {};
