import * as React from 'react';
import { Component } from 'react';
import { UIAnalyticsEvent, WithAnalyticsEventsProps } from '@atlaskit/analytics-next';
import { MediaClient, FileDetails, Identifier, FileIdentifier, ExternalImageIdentifier } from '@atlaskit/media-client';
import { Subscription } from 'rxjs/Subscription';
import { CardAction, CardDimensions, CardProps, CardState, CardStatus } from '../..';
import { CardViewBase } from '../cardView';
import { AnalyticsErrorStateAttributes, AnalyticsLoadingAction } from './getCardStatus';
import { InlinePlayerBase } from '../inlinePlayer';
export declare type CardWithAnalyticsEventsProps = CardProps & WithAnalyticsEventsProps;
export declare class CardBase extends Component<CardWithAnalyticsEventsProps, CardState> {
    private hasBeenMounted;
    private lastAction?;
    private lastErrorState?;
    private resolvedId;
    cardRef: React.RefObject<CardViewBase | InlinePlayerBase>;
    subscription?: Subscription;
    static defaultProps: Partial<CardProps>;
    state: CardState;
    onCopyListener: () => void;
    fireAnalytics: () => Promise<void>;
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: CardProps): void;
    shouldRefetchImage: (current?: CardDimensions | undefined, next?: CardDimensions | undefined) => boolean;
    componentWillUnmount(): void;
    releaseDataURI: () => void;
    private onLoadingChangeCallback;
    subscribe(identifier: Identifier, mediaClient: MediaClient): void;
    subscribeExternalFile(identifier: ExternalImageIdentifier): void;
    subscribeInternalFile(identifier: FileIdentifier, mediaClient: MediaClient): Promise<void>;
    shouldFireAnalyticsEvent: (action: AnalyticsLoadingAction, errorState: AnalyticsErrorStateAttributes) => boolean;
    fireLoadingStatusAnalyticsEvent: ({ resolvedId, status, fileState, metadata, error, }: {
        resolvedId: string;
        status: CardStatus;
        fileState?: import("@atlaskit/media-client").UploadingFileState | import("@atlaskit/media-client").ProcessingFileState | import("@atlaskit/media-client").ProcessedFileState | import("@atlaskit/media-client").ErrorFileState | import("@atlaskit/media-client").ProcessingFailedState | undefined;
        metadata?: FileDetails | undefined;
        error?: Error | undefined;
    }) => void;
    notifyStateChange: (state: Partial<CardState>) => void;
    unsubscribe: () => void;
    private onRetry;
    readonly actions: CardAction[];
    onCardViewClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>, analyticsEvent?: UIAnalyticsEvent | undefined) => Promise<void>;
    onInlinePlayerError: () => void;
    renderInlinePlayer: () => JSX.Element;
    onMediaViewerClose: () => void;
    private onDisplayImage;
    renderMediaViewer: () => React.ReactPortal | undefined;
    renderCard: () => JSX.Element;
    renderContent(): JSX.Element;
    render(): JSX.Element;
    onCardInViewport: () => void;
    onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>, analyticsEvent?: UIAnalyticsEvent | undefined) => void;
    onMouseEnter: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
}
export declare const Card: React.ComponentType<CardWithAnalyticsEventsProps>;
