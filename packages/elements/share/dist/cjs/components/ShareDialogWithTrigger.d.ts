import { AnalyticsEventPayload, WithAnalyticsEventsProps } from '@atlaskit/analytics-next';
import { ButtonAppearances } from '@atlaskit/button';
import { LoadOptions } from '@atlaskit/user-picker';
import * as React from 'react';
import { InjectedIntlProps } from 'react-intl';
import { ConfigResponse, DialogContentState, DialogPlacement, Flag, OriginTracing, RenderCustomTriggerButton, ShareButtonStyle, ShareError, TooltipPosition } from '../types';
declare type DialogState = {
    isDialogOpen: boolean;
    isSharing: boolean;
    shareError?: ShareError;
    ignoreIntermediateState: boolean;
    defaultValue: DialogContentState;
};
export declare type State = DialogState;
export declare type Props = {
    config?: ConfigResponse;
    children?: RenderCustomTriggerButton;
    copyLink: string;
    analyticsDecorator?: (payload: AnalyticsEventPayload) => AnalyticsEventPayload;
    dialogPlacement?: DialogPlacement;
    isDisabled?: boolean;
    isFetchingConfig?: boolean;
    loadUserOptions?: LoadOptions;
    onDialogOpen?: () => void;
    onShareSubmit?: (shareContentState: DialogContentState) => Promise<any>;
    renderCustomTriggerButton?: RenderCustomTriggerButton;
    shareContentType: string;
    shareFormTitle?: React.ReactNode;
    copyLinkOrigin?: OriginTracing;
    formShareOrigin?: OriginTracing;
    shouldCloseOnEscapePress?: boolean;
    showFlags: (flags: Array<Flag>) => void;
    triggerButtonAppearance?: ButtonAppearances;
    triggerButtonStyle?: ShareButtonStyle;
    triggerButtonTooltipPosition?: TooltipPosition;
    triggerButtonTooltipText?: React.ReactNode;
    bottomMessage?: React.ReactNode;
    submitButtonLabel?: React.ReactNode;
};
export declare const defaultShareContentState: DialogContentState;
export declare class ShareDialogWithTriggerInternal extends React.PureComponent<Props & InjectedIntlProps & WithAnalyticsEventsProps, State> {
    static defaultProps: Partial<Props>;
    private containerRef;
    private start;
    state: State;
    private closeAndResetDialog;
    private createAndFireEvent;
    private getFlags;
    private handleKeyDown;
    private onTriggerClick;
    private handleCloseDialog;
    private handleShareSubmit;
    private handleFormDismiss;
    handleCopyLink: () => void;
    renderShareTriggerButton: () => React.ReactNode;
    render(): JSX.Element;
}
export declare const ShareDialogWithTrigger: React.ForwardRefExoticComponent<Pick<Props & WithAnalyticsEventsProps, "children" | "isDisabled" | "config" | "copyLink" | "submitButtonLabel" | "isFetchingConfig" | "analyticsDecorator" | "dialogPlacement" | "loadUserOptions" | "onDialogOpen" | "onShareSubmit" | "renderCustomTriggerButton" | "shareContentType" | "shareFormTitle" | "copyLinkOrigin" | "formShareOrigin" | "shouldCloseOnEscapePress" | "showFlags" | "triggerButtonAppearance" | "triggerButtonStyle" | "triggerButtonTooltipPosition" | "triggerButtonTooltipText" | "bottomMessage"> & React.RefAttributes<any>>;
export {};
