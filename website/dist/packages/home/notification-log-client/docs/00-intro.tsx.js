(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[108,110,111],{696:function(n,t,i){"use strict";i.r(t);i.d(t,"default",function(){return s});var o=i(1);var e=i(0);var a=i.n(e);var c=i(661);var r=i(658);var l=function(n){Object(o["__extends"])(t,n);function t(){return n.call(this,"","")||this}t.prototype.countUnseenNotifications=function(){return Object(o["__awaiter"])(this,void 0,void 0,function(){return Object(o["__generator"])(this,function(n){return[2,Promise.resolve({count:5})]})})};return t}(r["NotificationLogClient"]);function s(){var n=new l;var t=Promise.resolve(n);return e["createElement"]("div",null,e["createElement"]("div",null,"Initialise client and render a NotificationIndicator badge."),e["createElement"](c["a"],{notificationLogProvider:t}))}},697:function(n,t){n.exports="import * as React from 'react';\n\nimport { NotificationIndicator } from '@atlaskit/notification-indicator';\n\nimport { NotificationLogClient } from '../src';\n\nclass MockNotificationLogClient extends NotificationLogClient {\n  constructor() {\n    super('', '');\n  }\n\n  public async countUnseenNotifications() {\n    return Promise.resolve({ count: 5 });\n  }\n}\n\nexport default function Example() {\n  /**\n   * We are using a mock version here because we don't want to call out to the real service to get a working example.\n   * Typically this would be:\n   *\n   * const notificationLogClient = new NotificationLogClient(\n   *   'base-url',\n   *   'cloud-id',\n   * );\n   */\n  const notificationLogClient = new MockNotificationLogClient();\n  const providerPromise = Promise.resolve(notificationLogClient);\n\n  return (\n    <div>\n      <div>Initialise client and render a NotificationIndicator badge.</div>\n\n      <NotificationIndicator notificationLogProvider={providerPromise} />\n    </div>\n  );\n}\n"},941:function(n,t,i){"use strict";i.r(t);var o=i(1);var e=i(0);var a=i.n(e);var c=i(180);t["default"]=Object(c["e"])(l||(l=Object(o["__makeTemplateObject"])(["\n  ","\n\n  `notification-log-client` is a fetch client implementation for making API calls to notification-log service.\n\n  This is intended to be used as a provider into other components, such as NotificationIndicator.\n\n  ## Usage\n\n  ","\n\n  ","\n"],["\n  ","\n\n  \\`notification-log-client\\` is a fetch client implementation for making API calls to notification-log service.\n\n  This is intended to be used as a provider into other components, such as NotificationIndicator.\n\n  ## Usage\n\n  ","\n\n  ","\n"])),e["createElement"](c["a"],null),Object(c["d"])(r||(r=Object(o["__makeTemplateObject"])(["import { NotificationLogClient } from '@atlaskit/notification-log-client';\n\n  const notificationLogClient = new NotificationLogClient(\n    'http://base-url-to-notification-log-service',\n    'cloudid-abcd-1234-5678',\n  );\n\n  const result = await notificationLogClient.countUnseenNotifications();\n  console.log(result.count);"],["import { NotificationLogClient } from '@atlaskit/notification-log-client';\n\n  const notificationLogClient = new NotificationLogClient(\n    'http://base-url-to-notification-log-service',\n    'cloudid-abcd-1234-5678',\n  );\n\n  const result = await notificationLogClient.countUnseenNotifications();\n  console.log(result.count);"]))),e["createElement"](c["b"],{Component:i(696).default,title:"Basic",source:i(697)}));var r,l}}]);