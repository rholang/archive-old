(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[106],{959:function(n,o){n.exports="import * as React from 'react';\n\nimport {\n  NotificationLogClient,\n  NotificationCountResponse,\n} from '@atlaskit/notification-log-client';\n\nimport { NotificationIndicator } from '../src';\n\nclass MockNotificationLogClient extends NotificationLogClient {\n  private response?: Promise<NotificationCountResponse>;\n\n  constructor() {\n    super('', '');\n  }\n\n  public async countUnseenNotifications() {\n    return (\n      this.response ||\n      Promise.resolve({\n        count: 5,\n      })\n    );\n  }\n\n  public setResponse(response: Promise<NotificationCountResponse>) {\n    this.response = response;\n  }\n}\n\nfunction returnCount(count: number): Promise<NotificationCountResponse> {\n  return Promise.resolve({ count });\n}\n\nfunction returnError(): Promise<NotificationCountResponse> {\n  return Promise.reject(new Error());\n}\n\nfunction renderNotificationIndicator(\n  response: Promise<NotificationCountResponse>,\n  props: Object = {},\n  client: MockNotificationLogClient = new MockNotificationLogClient(),\n) {\n  client.setResponse(response);\n\n  return (\n    <NotificationIndicator\n      notificationLogProvider={Promise.resolve(client)}\n      {...props}\n    />\n  );\n}\n\nexport default function Example() {\n  const refreshingClient = new MockNotificationLogClient();\n  let count = 1;\n  window.setInterval(() => {\n    count = (count % 10) + 1;\n    refreshingClient.setResponse(Promise.resolve({ count }));\n  }, 950);\n\n  return (\n    <div>\n      <h5>Has new notifications</h5>\n      {renderNotificationIndicator(returnCount(5))}\n\n      <h5>Has too many new notifications</h5>\n      {renderNotificationIndicator(returnCount(99))}\n\n      <h5>New notifications with higher max</h5>\n      {renderNotificationIndicator(returnCount(99), { max: 20 })}\n\n      <h5>New notifications with different appearance</h5>\n      {renderNotificationIndicator(returnCount(99), { appearance: 'primary' })}\n\n      <h5>Auto refresh with new notifications every 1 second</h5>\n      {renderNotificationIndicator(\n        returnCount(count),\n        { refreshRate: 1000 },\n        refreshingClient,\n      )}\n\n      <h5>No new notification (Should not render anything)</h5>\n      {renderNotificationIndicator(returnCount(0))}\n\n      <h5>Has error fetching notifications (Should not render anything)</h5>\n      {renderNotificationIndicator(returnError())}\n    </div>\n  );\n}\n"}}]);