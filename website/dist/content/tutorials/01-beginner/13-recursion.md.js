(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[75],{1016:function(t,e,n){"use strict";n.r(e);e["default"]={content:"\n## Recursion\n\nMany programming languages use iteration as a fundamental way of controlling the flow of their programs. Iteration inherently means doing a process to one item then the next then the next. Because rholang is a fully concurrent programming language this is impossible. But that's actually a strength!\n\n```\nmanually iterate through the list [1, 2, 3, 4]\n```\n\nThis process is clearly not sustainable because long lists would be extremely deeply nested. Worse, any code that we actually write would have a maximum depth. And we don't want to limit the length of our list. Consider this crafty code\n\n```\nSimple recursion that passes a counter and compares it to the lists length\n```\n\n```\nBetter version that uses pattern matching to detect empty list\n```\n\n## Recursion operators\n- map\n- filter\n- sumlist\n\n\n### Exercise\nWrite a contract that takes in two integers that represent a minimum and a maximum.\n\nExercise: group forwarder. I, the king, send messages to the forwarder who copies them to all the recipients. Rather than just having kill switch, I have the ability to change group subscription.\n\n\n\n\n",data:{title:"Recursion",description:"Everything you need to know to get up and running with Atlaskit"},isEmpty:false,excerpt:""}}}]);